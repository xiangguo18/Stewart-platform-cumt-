import numpy as np
def rotx(phi): 
    if phi > np.pi:
        phi = np.radians(phi)
    rotX = np.array([
    [1, 0, 0],
    [0, np.cos(phi), -np.sin(phi)],
    [0, np.sin(phi), np.cos(phi)]
    ])
    return rotX 
 
def roty(theta): 
    if theta > np.pi:
        theta  = np.radians(theta)
    rotY = np.array([
    [np.cos(theta), 0, np.sin(theta)],
    [0, 1, 0],
    [-np.sin(theta), 0, np.cos(theta)]
    ])
    return rotY  

def rotz(psi): 
    if psi  > np.pi:
        psi = np.radians(psi)
    rotZ = np.array([
    [np.cos(psi), -np.sin(psi), 0],
    [np.sin(psi), np.cos(psi), 0],
    [ 0, 0, 1]
    ])
    return rotZ 



'''
计算  有效杆长(电动缸长度) rod
'''

#输入参数
phi=float(input("phi:"))
theta=float(input('theta:'))
psi=float(input("psi:"))
trans = 
orient = 
rod_p =
servo_b =


#计算旋转矩阵
T_BP = np.dot(rotz(phi),np.dot(roty(theta),rotx(psi)))

#计算rod_p
rod_b = np.dot(T_BP,rod_p) + home + trans     """未定义 rod_p  home  trans  servo_b"""

#计算rod
L_B = rod_b - servo_b    
rod = np.linalg.norm(L_B)                          #输出


#test
print("T_BP:",T_BP)
print(np.linalg.norm([1,2,3]))
E



'''
计算  舵机转角 angle
'''

 #输入
rod = rod                     #跟前文可能有重复
servo_arm =
leg =
beta =     #角度值
beta = np.radions(beta)
rod_p =
servo_b =

 #获得坐标
x_p = 
y_p =
z_p =
x_b =
y_b =
z_b =

 #更新舵机转角     矩阵运算还是数值运算？
rod2 = np.dot(rod,rod)         # .*?
leg2 = np.dot(leg,leg)
arm2 = np.dot(servo_arm,servo_arm)

l = rod2 - leg2 + arm2
M = 2 * servo_arm * (z_p - z_b)
N = 2 * servo_arm * (np.dot(np.cos(beta),(x_p - x_b)) + np.sin(np.sin(beta)))   # .*?
M2 = np.dot(M,M)
N2 = np.dot(N,N)

#计算角度
angle = np.arcsin(l / (M2 - N2)**0.5) -np.arctan(N,M)
